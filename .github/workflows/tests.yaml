name: Test Server and Log Analysis

on:
  push:

jobs:
  run_and_test_server:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # Cache Python dependencies
      - name: Cache pip dependencies
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('github_tests/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        # if: steps.cache-pip.outputs.cache-hit != 'true'
        run: pip install -r github_tests/requirements.txt

      # Cache Playwright browsers
      - name: Cache Playwright browsers
        id: cache-play
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json', 'yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright Browsers
        if: steps.cache-play.outputs.cache-hit != 'true'
        run: |
          npx playwright install --with-deps
          playwright install

      - name: Start server
        run: python -m http.server 8080 &
        # working-directory: /
        timeout-minutes: 1
        id: start_server

      - name: Wait for server to start
        run: |
          #!/bin/bash
          timeout 60 bash -c 'until echo > /dev/tcp/localhost/8080; do sleep 1; done'
        shell: bash

      - name: Run tests in headless browser
        run: python github_tests/run_browser_tests.py
        timeout-minutes: 5 # Adjust timeout based on how long your browser tests take

      - name: Wait for logs to be written
        run: sleep 1 # Adjust as needed

      - name: Stop server
        run: |
          SERVER_PID=$(lsof -t -i :8080)
          if [ -n "$SERVER_PID" ]; then
            kill $SERVER_PID
            echo "Server stopped."
          else
            echo "Server process not found."
          fi
        if: always()

      - run: ls
      - run: cat post_data.log

      - name: Analyze logs and check for test failures
        run: python github_tests/analyse_logs.py
        # This step will now fail if analyse_logs.py exits with a non-zero status
        if: success() || failure()
